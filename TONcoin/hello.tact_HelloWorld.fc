#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; hello.tact_HelloWorld.headers.fc
;;
;; Header files for HelloWorld
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Ping$_load_without_opcode
(slice, (tuple)) $Ping$_load_without_opcode(slice sc_0) inline;

;; $Pong$_store
builder $Pong$_store(builder build_0, tuple v) inline;

;; $Pong$_store_cell
cell $Pong$_store_cell(tuple v) inline;

;; $Hello$_store
builder $Hello$_store(builder build_0, tuple v) inline;

;; $Hello$_store_cell
cell $Hello$_store_cell(tuple v) inline;

;; $Hello$_load_without_opcode
(slice, (tuple)) $Hello$_load_without_opcode(slice sc_0) inline;

;; $HelloWorld$_contract_init
tuple $HelloWorld$_contract_init() impure inline;

;; $HelloWorld$_contract_load
tuple $HelloWorld$_contract_load() impure inline;

;; $HelloWorld$_contract_store
() $HelloWorld$_contract_store(tuple v) impure inline;

;; $MessageParameters$_constructor_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $global_reply
() $global_reply(cell $msgBody) impure inline;

;; $Pong$_constructor_
(tuple) $Pong$_constructor_() inline;


;; hello.tact_HelloWorld.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_cashback(slice $to) impure asm """
    16 PUSHINT       // 0x10, i.e. 0x18 but with bounce = false
    NEWC
    6 STU            // .storeUint(0x10, 6)
    STSLICE          // .storeAddress(to)
    0 PUSHINT        // 0
    111 STUR         // .storeUint(0, 111)
                     // 4 zeros for coins and 107 zeros for lt, fees, etc.
    ENDC
    66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
    SENDRAWMSG
""";

;; hello.tact_HelloWorld.storage.fc
;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

;;
;; Type: Ping
;; Header: 0x00000001
;; TLB: ping#00000001  = Ping
;;

(slice, (tuple)) $Ping$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Pong
;; Header: 0x00000002
;; TLB: pong#00000002  = Pong
;;

builder $Pong$_store(builder build_0, tuple v) inline {
    build_0 = store_uint(build_0, 2, 32);
    return build_0;
}

cell $Pong$_store_cell(tuple v) inline {
    return $Pong$_store(begin_cell(), v).end_cell();
}

(tuple) $Pong$_constructor_() inline {
    return empty_tuple();
}

;;
;; Type: Hello
;; Header: 0x00000003
;; TLB: hello#00000003  = Hello
;;

builder $Hello$_store(builder build_0, tuple v) inline {
    build_0 = store_uint(build_0, 3, 32);
    return build_0;
}

cell $Hello$_store_cell(tuple v) inline {
    return $Hello$_store(begin_cell(), v).end_cell();
}

(slice, (tuple)) $Hello$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: HelloWorld
;; TLB: _  = HelloWorld
;;

tuple $HelloWorld$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    }
    else {
        return $HelloWorld$_contract_init();
    }
}

() $HelloWorld$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;;
;; Contract HelloWorld functions
;;

tuple $HelloWorld$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

() $global_reply(cell $msgBody) impure inline {
    $global_message($MessageParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 66, $msgBody));
}

;;
;; Get methods of a Contract HelloWorld
;;

;;
;; Routing of a Contract HelloWorld
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $HelloWorld$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive Ping message
    if (op == 1) {
        var $msg = in_msg~$Ping$_load_without_opcode();
        $global_reply($Pong$_store_cell($Pong$_constructor_()));
        $HelloWorld$_contract_store($self);
        return ();
    }
    
    ;; Receive Hello message
    if (op == 3) {
        var $msg = in_msg~$Hello$_load_without_opcode();
        $global_reply($Hello$_store_cell($msg));
        $HelloWorld$_contract_store($self);
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $global_cashback(__tact_context_get_sender());
        $HelloWorld$_contract_store($self);
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}