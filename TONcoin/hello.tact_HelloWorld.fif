// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/edmondium/Linux/TONcoin/hello.tact_HelloWorld.fc` 
PROGRAM{
  DECLPROC __tact_context_get_sender
  DECLPROC $Ping$_load_without_opcode
  DECLPROC $Pong$_store
  DECLPROC $Pong$_store_cell
  DECLPROC $Hello$_store
  DECLPROC $Hello$_store_cell
  DECLPROC $Hello$_load_without_opcode
  DECLPROC $HelloWorld$_contract_init
  DECLPROC $HelloWorld$_contract_load
  DECLPROC $HelloWorld$_contract_store
  DECLPROC $MessageParameters$_constructor_to_value_mode_body
  DECLPROC $global_reply
  DECLPROC $Pong$_constructor_
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Ping$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $Pong$_store PROCINLINE:<{
    DROP
    2 PUSHINT
    SWAP
    32 STU
  }>
  $Pong$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $Pong$_store INLINECALLDICT
    ENDC
  }>
  $Hello$_store PROCINLINE:<{
    DROP
    3 PUSHINT
    SWAP
    32 STU
  }>
  $Hello$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $Hello$_store INLINECALLDICT
    ENDC
  }>
  $Hello$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $HelloWorld$_contract_init PROCINLINE:<{
    PUSHNULL
  }>
  $HelloWorld$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    DROP
    IF:<{
      PUSHNULL
    }>ELSE<{
      $HelloWorld$_contract_init INLINECALLDICT
    }>
  }>
  $HelloWorld$_contract_store PROCINLINE:<{
    DROP
    NEWC
    TRUE
    SWAP
    1 STI
    ENDC
    c4 POP
  }>
  $MessageParameters$_constructor_to_value_mode_body PROCINLINE:<{
    s0 s0 s3 XCHG3
    TRUE
  }>
  $global_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    0 PUSHINT
    ROT
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // â†’ Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $Pong$_constructor_ PROCINLINE:<{
    NIL
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $HelloWorld$_contract_load INLINECALLDICT
    s0 s2 XCHG
    IFJMP:<{
      2DROP
    }>
    0 PUSHINT
    OVER
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      SWAP
      32 LDU
      s0 s2 XCHG
    }>
    OVER
    1 EQINT
    IFJMP:<{
      3 BLKDROP
      $Pong$_constructor_ INLINECALLDICT
      $Pong$_store_cell INLINECALLDICT
      $global_reply INLINECALLDICT
      $HelloWorld$_contract_store INLINECALLDICT
    }>
    OVER
    3 EQINT
    IFJMP:<{
      2DROP
      $Hello$_load_without_opcode INLINECALLDICT
      NIP
      $Hello$_store_cell INLINECALLDICT
      $global_reply INLINECALLDICT
      $HelloWorld$_contract_store INLINECALLDICT
    }>
    s2 POP
    0 EQINT
    SWAP
    33 LESSINT
    AND
    IFJMP:<{
      __tact_context_get_sender INLINECALLDICT
          16 PUSHINT       // 0x10, i.e. 0x18 but with bounce = false
          NEWC
          6 STU            // .storeUint(0x10, 6)
          STSLICE          // .storeAddress(to)
          0 PUSHINT        // 0
          111 STUR         // .storeUint(0, 111)
                           // 4 zeros for coins and 107 zeros for lt, fees, etc.
          ENDC
          66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
          SENDRAWMSG
      $HelloWorld$_contract_store INLINECALLDICT
    }>
    DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
